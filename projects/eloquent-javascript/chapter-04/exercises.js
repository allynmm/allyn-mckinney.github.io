////////////////////////////////////////////////////////////////////////////////
// range ///////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function range(start, end) {
  var arr = [];

  if (start === end){
    return arr;
  } else if (start > end) {
    let count = start;
    while (count >= end){
      arr.push(count);
      count--;
    }
  } else if (start < end) {
    let count = start;
    while (count <= end){
      arr.push(count);
      count++
    }
  }
  // let count = start;
  // while (count <= end){
  //   arr.push(count);
  //   count++;
  // }
  return arr;
}

////////////////////////////////////////////////////////////////////////////////
// sum /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function sum(array) {
  let answer = 0;
  for ( let i = 0; i < array.length; i++){
    answer += array[i];
  }
  return answer;
}

////////////////////////////////////////////////////////////////////////////////
// reverseArray ////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArray(array) {
  // var output = [];
  // for (let i = 0; i < array.length; i++){
  //   output.unshift(array[i]);
  // }
  // return output;

  var output = array.slice().reverse();
  return output;
}

////////////////////////////////////////////////////////////////////////////////
// reverseArrayInPlace /////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArrayInPlace(array) {
  var output = array.reverse();
  return output;
}

////////////////////////////////////////////////////////////////////////////////
// arrayToList /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function arrayToList(array) {
 let rest = null;

 for (let i = array.length -1; i >= 0; i--){
  rest = { value: array[i], rest: rest };
 }

 return rest;
}

////////////////////////////////////////////////////////////////////////////////
// listToArray /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function listToArray(list, arr=[]) {
 // base
 if (list.rest === null){
  arr.push(list.value);
  return arr;
 }

 // recursion
 arr.push(list.value);
 return listToArray(list.rest , arr);
}

////////////////////////////////////////////////////////////////////////////////
// prepend /////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function prepend(element, list) {
  // call the arrayToList function?
}

////////////////////////////////////////////////////////////////////////////////
// nth /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function nth(list, number) {
  // is element refering to an array and the list param is an array?
    // or is element refering to the value after turning an array to a list?
  // base

  // recursion
}

////////////////////////////////////////////////////////////////////////////////
// deepEqual ///////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function deepEqual(x, y) {
  // determine if x and y is NOT an object
  if (typeof x !== 'object' && typeof y !== 'object') {
    return x === y;
  }

  // determine if x OR y are objects
  if (typeof x !== 'object' || typeof y !== 'object'){
    return false;
  }
  // create an array of each inputs keys
  let xKeys = Object.keys(x);
  let yKeys = Object.keys(y);

  if (xKeys.length !== yKeys.length){
    return false;
  }

  // iterate to determine if array keys match and values match
  for (let i = 0; i < xKeys.length; i++){
    if (!yKeys.includes(xKeys[i]) || !deepEqual(x[xKeys[i]], y[xKeys[i]])){ // determinen if current key is NOT included in yKeys
      return false;
    }
  }

  return true;
}

////////////////////////////////////////////////////////////////////////////////
// DON'T REMOVE THIS CODE //////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    range,
    sum,
    reverseArray,
    reverseArrayInPlace,
    arrayToList,
    listToArray,
    prepend,
    nth,
    deepEqual,
  };
};
